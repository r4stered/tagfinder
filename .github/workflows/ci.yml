name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  formatting:
    name: Check Code Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install clang-format
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format
          
      - name: Check formatting
        run: |
          find . -name '*.cpp' -o -name '*.h' | \
          grep -v "build/" | \
          xargs clang-format --dry-run --Werror

  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Debug, Release]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Ninja/CMake
        uses: lukka/get-cmake@latest 

      - name: Configure CMake (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cmake -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DENABLE_TESTING=ON

      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: cmake -B build -G "Visual Studio 17 2022" -A x64 -DENABLE_TESTING=ON

      - name: Build
        run: cmake --build build --config ${{ matrix.build_type }}

      - name: Test
        run: ctest --test-dir build -C ${{ matrix.build_type }} --output-on-failure

  sanitizers:
    name: Sanitizers
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sanitizer: [address, undefined, thread]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Ninja/CMake
        uses: lukka/get-cmake@latest 

      - name: Configure CMake with ${{ matrix.sanitizer }} Sanitizer
        run: |
          cmake -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DENABLE_TESTING=ON \
            -DENABLE_SANITIZERS=ON \
            -DENABLE_SANITIZER_ADDRESS=${{ matrix.sanitizer == 'address' && 'ON' || 'OFF' }} \
            -DENABLE_SANITIZER_LEAK=${{ matrix.sanitizer == 'address' && 'ON' || 'OFF' }} \
            -DENABLE_SANITIZER_UNDEFINED_BEHAVIOR=${{ matrix.sanitizer == 'undefined' && 'ON' || 'OFF' }} \
            -DENABLE_SANITIZER_THREAD=${{ matrix.sanitizer == 'thread' && 'ON' || 'OFF' }}

      - name: Build
        run: cmake --build build

      - name: Test with ${{ matrix.sanitizer }} Sanitizer
        run: |
          export ASAN_OPTIONS=detect_leaks=1:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1
          export UBSAN_OPTIONS=print_stacktrace=1:halt_on_error=1
          export TSAN_OPTIONS=halt_on_error=1:second_deadlock_stack=1
          ctest --test-dir build --output-on-failure

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Ninja/CMake
        uses: lukka/get-cmake@latest 

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy cppcheck

      - name: Configure CMake with Static Analysis
        run: |
          cmake -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DENABLE_TESTING=ON \
            -DENABLE_CLANG_TIDY=ON \
            -DENABLE_CPPCHECK=ON

      - name: Find and Replace
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "REPLACEME"
          replace: "*:${{ github.workspace }}/build/_deps/*"
          include: "**CppCheckSuppressions.txt"

      - name: Build with Static Analysis
        run: cmake --build build 2>&1 | tee static_analysis.log

      - name: Check for warnings
        run: |
          if grep -q "warning:" static_analysis.log; then
            echo "Static analysis warnings found"
            exit 1
          fi

  valgrind:
    name: Memory Check (Valgrind)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Ninja/CMake
        uses: lukka/get-cmake@latest

      - name: Install Valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind

      - name: Configure CMake
        run: |
          cmake -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DENABLE_TESTING=ON

      - name: Build
        run: cmake --build build

      - name: Test with Valgrind
        run: |
          cd build/bin
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 ./tests/apriltag_tests