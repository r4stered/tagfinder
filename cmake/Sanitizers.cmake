function(enable_sanitizers target)
    if(NOT ENABLE_SANITIZERS)
        return()
    endif()

    set(SANITIZERS "")

    if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES ".*Clang")
        option(ENABLE_SANITIZER_ADDRESS "Enable address sanitizer" ON)
        option(ENABLE_SANITIZER_LEAK "Enable leak sanitizer" ON)
        option(ENABLE_SANITIZER_UNDEFINED_BEHAVIOR "Enable undefined behavior sanitizer" ON)
        option(ENABLE_SANITIZER_THREAD "Enable thread sanitizer" OFF)
        option(ENABLE_SANITIZER_MEMORY "Enable memory sanitizer" OFF)

        if(ENABLE_SANITIZER_ADDRESS)
            list(APPEND SANITIZERS "address")
        endif()

        if(ENABLE_SANITIZER_LEAK)
            list(APPEND SANITIZERS "leak")
        endif()

        if(ENABLE_SANITIZER_UNDEFINED_BEHAVIOR)
            list(APPEND SANITIZERS "undefined")
        endif()

        if(ENABLE_SANITIZER_THREAD)
            if(ENABLE_SANITIZER_ADDRESS OR ENABLE_SANITIZER_LEAK)
                message(WARNING "Thread sanitizer does not work with Address or Leak sanitizer enabled")
            else()
                list(APPEND SANITIZERS "thread")
            endif()
        endif()

        if(ENABLE_SANITIZER_MEMORY)
            if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
                message(WARNING "Memory sanitizer is not supported by GCC")
            elseif(ENABLE_SANITIZER_ADDRESS OR ENABLE_SANITIZER_LEAK OR ENABLE_SANITIZER_THREAD)
                message(WARNING "Memory sanitizer does not work with other sanitizers enabled")
            else()
                list(APPEND SANITIZERS "memory")
            endif()
        endif()

        list(JOIN SANITIZERS "," LIST_OF_SANITIZERS)
    endif()

    if(LIST_OF_SANITIZERS)
        if(NOT "${LIST_OF_SANITIZERS}" STREQUAL "")
            target_compile_options(${target} PRIVATE -fsanitize=${LIST_OF_SANITIZERS})
            target_link_options(${target} PRIVATE -fsanitize=${LIST_OF_SANITIZERS})
        endif()
    endif()
endfunction()